# 导入必要的库
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# 读取包含公司名称和地址的表格
data = {
    "english_name": ["Microsoft Corporation", "Apple Inc.", "Amazon.com, Inc."],
    "english_address": ["One Microsoft Way, Redmond, WA 98052, USA", "1 Apple Park Way, Cupertino, CA 95014, USA", "410 Terry Ave N, Seattle, WA 98109, USA"],
    "chinese_name": ["微软公司", "苹果公司", "亚马逊公司"]
}
df=pd.DataFrame(data)

# 提取英文名称和地址的列
english_names = df["english_name"]
english_addresses = df["english_address"]

# 提取中文名称的列
chinese_names = df["chinese_name"]

# 定义一个函数，将英文名称和地址拼接成一个字符串
def combine_name_address(name, address):
    return name + " " + address

# 对英文名称和地址进行拼接
english_combined = [combine_name_address(name, address) for name, address in zip(english_names, english_addresses)]
# 使用TfidfVectorizer将英文名称和地址转换为向量
vectorizer = TfidfVectorizer()
english_vectors = vectorizer.fit_transform(english_combined)

# 定义一个函数，根据给定的英文名称和地址，返回最匹配的中文名称、匹配度数据以及匹配的英文公司名称和地址
def match_chinese_name(english_name, english_address):
    # 将给定的英文名称和地址拼接成一个字符串
    english_query = combine_name_address(english_name, english_address)

    
    query_vector = vectorizer.transform([english_query])
    
    # 计算英文名称和地址与中文名称之间的余弦相似度
    similarities = cosine_similarity(query_vector, english_vectors)
    
    # 返回最匹配的中文名称、匹配度数据以及匹配的英文公司名称和地址
    index = similarities.argmax()
    chinese_name = chinese_names[index]
    similarity = similarities[0][index]
    english_name = english_names[index]
    english_address = english_addresses[index]
    return chinese_name, similarity, english_name, english_address

# 测试函数
english_name = "Apple Inc"
english_address = "1  e"
chinese_name, similarity, english_name, english_address = match_chinese_name(english_name, english_address)
print("匹配的中文公司名称：", chinese_name)
print("匹配度数据：", similarity)
print("匹配的英文公司名称：", english_name)
print("匹配的英文公司地址：", english_address)
